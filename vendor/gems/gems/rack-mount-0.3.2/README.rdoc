= Rack::Mount

A stackable dynamic tree based Rack router.

Rack::Mount supports Rack's Cascade style of trying several routes until it finds one that is not a 404. This allows multiple routes to be nested or stacked on top of each other. Since the application endpoint can trigger the router to continue matching, middleware can be used to add arbitrary conditions to any route. This allows you to route based on other request attributes, session information, or even data dynamically pulled from a database.

=== Usage

Rack::Mount provides a plugin API to build custom DSLs on top of.

The API is extremely minimal and only 3 methods are exposed as the public API.

<tt>Rack::Mount::RouteSet#add_route</tt>:: builder method for adding routes to the set
<tt>Rack::Mount::RouteSet#call</tt>:: Rack compatible recognition and dispatching method
<tt>Rack::Mount::RouteSet#url</tt>:: generates path from identifiers or significant keys

=== Example

  require 'rack/mount'
  Routes = Rack::Mount::RouteSet.new do |set|
    # add_route takes a rack application and conditions to match with
    # conditions may be strings or regexps
    # See Rack::Mount::RouteSet#add_route for more options.
    set.add_route FooApp, :method => 'get', :path => %{/foo}
  end

  # The route set itself is a simple rack app you mount
  run Routes
